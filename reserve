# Timetable Backend API Documentation

## Overview
This document outlines the expected backend API structure for the Timetable component to fetch and display student class schedules.

## API Endpoints

### 1. Get Student Timetable
**Endpoint:** `GET /api/students/{student_id}/timetable`

**Response Structure:**
```json
{
  "success": true,
  "data": {
    "student_id": "string",
    "semester": "string",
    "academic_year": "string",
    "timetable_slots": [
      {
        "time_slot": "0700-0800",
        "monday": {
          "id": "string",
          "course_code": "string",
          "course_name": "string",
          "class_type": "lecture|tutorial|seminar|practical",
          "venue": "string",
          "instructor": "string",
          "duration": 1,
          "description": "string (optional)"
        },
        "tuesday": {
          "id": "string",
          "course_code": "string", 
          "course_name": "string",
          "class_type": "lecture|tutorial|seminar|practical",
          "venue": "string",
          "instructor": "string",
          "duration": 1,
          "description": "string (optional)"
        },
        "wednesday": {
          "id": "string",
          "course_code": "string",
          "course_name": "string", 
          "class_type": "lecture|tutorial|seminar|practical",
          "venue": "string",
          "instructor": "string",
          "duration": 1,
          "description": "string (optional)"
        },
        "thursday": {
          "id": "string",
          "course_code": "string",
          "course_name": "string",
          "class_type": "lecture|tutorial|seminar|practical", 
          "venue": "string",
          "instructor": "string",
          "duration": 1,
          "description": "string (optional)"
        },
        "friday": {
          "id": "string",
          "course_code": "string",
          "course_name": "string",
          "class_type": "lecture|tutorial|seminar|practical",
          "venue": "string", 
          "instructor": "string",
          "duration": 1,
          "description": "string (optional)"
        }
      }
    ]
  },
  "message": "Timetable retrieved successfully"
}
```

## Data Field Descriptions

### Time Slot Format
- **Format:** `HHMM-HHMM` (24-hour format)
- **Example:** `"0700-0800"`, `"0800-0900"`, `"1400-1500"`
- **Range:** 07:00 to 20:00 (configurable)

### Class Information Fields

| Field | Type | Required | Description |
|-------|------|----------|-------------|
| `id` | string | Yes | Unique identifier for the class session |
| `course_code` | string | Yes | Course code (e.g., "ME207", "EE254") |
| `course_name` | string | Yes | Full course name |
| `class_type` | enum | Yes | One of: "lecture", "tutorial", "seminar", "practical" |
| `venue` | string | Yes | Classroom/venue location |
| `instructor` | string | Yes | Instructor/lecturer name |
| `duration` | integer | Yes | Duration in hours (typically 1-3) |
| `description` | string | No | Optional class description |

### Day Fields
- **monday** - Class information for Monday (can be null)
- **tuesday** - Class information for Tuesday (can be null)  
- **wednesday** - Class information for Wednesday (can be null)
- **thursday** - Class information for Thursday (can be null)
- **friday** - Class information for Friday (can be null)

## Multi-Hour Classes
For classes that span multiple time slots:
- The class should appear in the **first** time slot only
- Set `duration` to the total number of hours
- The frontend will automatically span the class across multiple rows

**Example:**
```json
{
  "time_slot": "0800-0900",
  "monday": {
    "id": "class_123",
    "course_code": "ME207",
    "course_name": "Mechanical Engineering Lab",
    "class_type": "practical",
    "venue": "Lab A",
    "instructor": "Dr. Smith",
    "duration": 3
  }
}
```
This class will span from 08:00-11:00 (3 hours).

## Error Responses

### 404 - Student Not Found
```json
{
  "success": false,
  "error": "Student not found",
  "message": "Student with ID {student_id} does not exist"
}
```

### 500 - Server Error
```json
{
  "success": false,
  "error": "Internal server error",
  "message": "Failed to retrieve timetable data"
}
```

## Frontend Integration

### API Service Function
```typescript
// In your API service file
export const getStudentTimetable = async (studentId: string) => {
  const response = await api.get(`/students/${studentId}/timetable`);
  return response.data;
};
```

### Component Integration
```typescript
// In Timetable.tsx
const { student } = useStudent();
const [timetableData, setTimetableData] = useState<TimetableSlot[]>([]);

useEffect(() => {
  if (student?.id) {
    getStudentTimetable(student.id)
      .then(data => setTimetableData(data.timetable_slots))
      .catch(error => console.error('Failed to load timetable:', error));
  }
}, [student?.id]);
```

## Notes
- All time slots should be included in the response, even if they have no classes
- Empty time slots should have `null` values for all day fields
- The API should return data for the current semester by default
- Consider adding query parameters for semester/year filtering if needed
- Ensure proper error handling and loading states in the frontend


# Timetable Slot CRUD API Guide

This guide covers all the CRUD (Create, Read, Update, Delete) operations available for timetable slots in the CaluuPlus API.

## Base URL
```
http://localhost:8000/api
```

## Authentication
All endpoints require authentication. Include the JWT token in the Authorization header:
```
Authorization: Bearer <your_jwt_token>
```

## Endpoints Overview

| Method | Endpoint | Description |
|--------|----------|-------------|
| GET | `/timetable-slots/` | List all timetable slots for authenticated student |
| POST | `/timetable-slots/` | Create a new timetable slot |
| GET | `/timetable-slots/{id}/` | Get specific timetable slot |
| PUT | `/timetable-slots/{id}/` | Update entire timetable slot |
| PATCH | `/timetable-slots/{id}/` | Partial update timetable slot |
| DELETE | `/timetable-slots/{id}/` | Delete timetable slot |
| GET | `/timetable-slots/semester/{semester}/year/{year}/` | Filter by semester and year |
| GET | `/timetable-slots/day/{day}/` | Filter by day of week |
| POST | `/timetable-slots/bulk-create/` | Create multiple slots at once |
| DELETE | `/timetable-slots/bulk-delete/` | Delete multiple slots at once |

---

## 1. List All Timetable Slots

**GET** `/timetable-slots/`

Returns all timetable slots for the authenticated student.

### Response
```json
[
  {
    "id": "550e8400-e29b-41d4-a716-446655440000",
    "student": "550e8400-e29b-41d4-a716-446655440001",
    "course": "550e8400-e29b-41d4-a716-446655440002",
    "course_code": "CS101",
    "course_name": "Introduction to Programming",
    "time_slot": "0900-1000",
    "day_of_week": "monday",
    "class_type": "lecture",
    "venue": "Room 101",
    "instructor": "Dr. Smith",
    "instructor_name": "Dr. Smith",
    "description": "Introduction to Programming",
    "duration": 1,
    "semester": 1,
    "academic_year": "2024",
    "created_at": "2024-01-15T10:30:00Z",
    "updated_at": "2024-01-15T10:30:00Z"
  }
]
```

---

## 2. Create Timetable Slot

**POST** `/timetable-slots/`

Creates a new timetable slot for the authenticated student.

### Request Body
```json
{
  "course": "550e8400-e29b-41d4-a716-446655440002",
  "time_slot": "0900-1000",
  "day_of_week": "monday",
  "class_type": "lecture",
  "venue": "Room 101",
  "instructor": "Dr. Smith",
  "description": "Introduction to Programming",
  "semester": 1,
  "academic_year": "2024"
}
```

### Field Descriptions
- `course` (required): UUID of the course
- `time_slot` (required): Time in format "HHMM-HHMM" (e.g., "0900-1000")
- `day_of_week` (required): One of: "monday", "tuesday", "wednesday", "thursday", "friday"
- `class_type` (optional): One of: "lecture", "tutorial", "seminar", "practical" (default: "lecture")
- `venue` (optional): Room or location (default: "TBA")
- `instructor` (optional): Instructor name (default: "TBA")
- `description` (optional): Additional description
- `semester` (required): Semester number (1 or 2)
- `academic_year` (required): Academic year as string (e.g., "2024")

### Response
```json
{
  "id": "550e8400-e29b-41d4-a716-446655440000",
  "student": "550e8400-e29b-41d4-a716-446655440001",
  "course": "550e8400-e29b-41d4-a716-446655440002",
  "course_code": "CS101",
  "course_name": "Introduction to Programming",
  "time_slot": "0900-1000",
  "day_of_week": "monday",
  "class_type": "lecture",
  "venue": "Room 101",
  "instructor": "Dr. Smith",
  "instructor_name": "Dr. Smith",
  "description": "Introduction to Programming",
  "duration": 1,
  "semester": 1,
  "academic_year": "2024",
  "created_at": "2024-01-15T10:30:00Z",
  "updated_at": "2024-01-15T10:30:00Z"
}
```

---

## 3. Get Specific Timetable Slot

**GET** `/timetable-slots/{id}/`

Retrieves a specific timetable slot by ID.

### Response
Same as create response above.

---

## 4. Update Timetable Slot

**PUT** `/timetable-slots/{id}/` (Full update)
**PATCH** `/timetable-slots/{id}/` (Partial update)

Updates an existing timetable slot.

### Request Body (PUT - Full Update)
```json
{
  "course": "550e8400-e29b-41d4-a716-446655440002",
  "time_slot": "1000-1100",
  "day_of_week": "tuesday",
  "class_type": "tutorial",
  "venue": "Lab 1",
  "instructor": "Dr. Johnson",
  "description": "Programming Tutorial",
  "semester": 1,
  "academic_year": "2024"
}
```

### Request Body (PATCH - Partial Update)
```json
{
  "venue": "Room 202",
  "instructor": "Dr. Wilson"
}
```

### Response
Same as create response above.

---

## 5. Delete Timetable Slot

**DELETE** `/timetable-slots/{id}/`

Deletes a specific timetable slot.

### Response
- **Status Code**: 204 No Content
- **Body**: Empty

---

## 6. Filter by Semester and Year

**GET** `/timetable-slots/semester/{semester}/year/{academic_year}/`

Returns timetable slots for a specific semester and academic year.

### Example
```
GET /timetable-slots/semester/1/year/2024/
```

### Response
```json
{
  "semester": 1,
  "academic_year": "2024",
  "slots": [
    {
      "id": "550e8400-e29b-41d4-a716-446655440000",
      "course_code": "CS101",
      "course_name": "Introduction to Programming",
      "time_slot": "0900-1000",
      "day_of_week": "monday",
      "class_type": "lecture",
      "venue": "Room 101",
      "instructor": "Dr. Smith",
      "description": "Introduction to Programming",
      "duration": 1,
      "semester": 1,
      "academic_year": "2024",
      "created_at": "2024-01-15T10:30:00Z",
      "updated_at": "2024-01-15T10:30:00Z"
    }
  ],
  "total_slots": 1
}
```

---

## 7. Filter by Day of Week

**GET** `/timetable-slots/day/{day_of_week}/`

Returns timetable slots for a specific day of the week.

### Valid Days
- `monday`
- `tuesday`
- `wednesday`
- `thursday`
- `friday`

### Example
```
GET /timetable-slots/day/monday/
```

### Response
```json
{
  "day_of_week": "monday",
  "slots": [
    {
      "id": "550e8400-e29b-41d4-a716-446655440000",
      "course_code": "CS101",
      "course_name": "Introduction to Programming",
      "time_slot": "0900-1000",
      "day_of_week": "monday",
      "class_type": "lecture",
      "venue": "Room 101",
      "instructor": "Dr. Smith",
      "description": "Introduction to Programming",
      "duration": 1,
      "semester": 1,
      "academic_year": "2024",
      "created_at": "2024-01-15T10:30:00Z",
      "updated_at": "2024-01-15T10:30:00Z"
    }
  ],
  "total_slots": 1
}
```

---

## 8. Bulk Create Timetable Slots

**POST** `/timetable-slots/bulk-create/`

Creates multiple timetable slots at once.

### Request Body
```json
{
  "slots": [
    {
      "course": "550e8400-e29b-41d4-a716-446655440002",
      "time_slot": "1000-1100",
      "day_of_week": "tuesday",
      "class_type": "tutorial",
      "venue": "Lab 1",
      "instructor": "Dr. Brown",
      "description": "Programming Tutorial",
      "semester": 1,
      "academic_year": "2024"
    },
    {
      "course": "550e8400-e29b-41d4-a716-446655440003",
      "time_slot": "1100-1200",
      "day_of_week": "wednesday",
      "class_type": "practical",
      "venue": "Lab 2",
      "instructor": "Dr. Wilson",
      "description": "Programming Practical",
      "semester": 1,
      "academic_year": "2024"
    }
  ]
}
```

### Response
```json
{
  "message": "Created 2 out of 2 slots",
  "created_slots": [
    {
      "id": "550e8400-e29b-41d4-a716-446655440000",
      "course_code": "CS101",
      "course_name": "Introduction to Programming",
      "time_slot": "1000-1100",
      "day_of_week": "tuesday",
      "class_type": "tutorial",
      "venue": "Lab 1",
      "instructor": "Dr. Brown",
      "description": "Programming Tutorial",
      "duration": 1,
      "semester": 1,
      "academic_year": "2024",
      "created_at": "2024-01-15T10:30:00Z",
      "updated_at": "2024-01-15T10:30:00Z"
    }
  ],
  "errors": [],
  "success_count": 2,
  "error_count": 0
}
```

---

## 9. Bulk Delete Timetable Slots

**DELETE** `/timetable-slots/bulk-delete/`

Deletes multiple timetable slots at once.

### Request Body
```json
{
  "slot_ids": [
    "550e8400-e29b-41d4-a716-446655440000",
    "550e8400-e29b-41d4-a716-446655440001"
  ]
}
```

### Response
```json
{
  "message": "Deleted 2 timetable slots",
  "deleted_count": 2,
  "requested_count": 2
}
```

---

## Error Responses

### 400 Bad Request
```json
{
  "error": "Missing required fields",
  "required": ["course", "time_slot", "day_of_week"]
}
```

### 401 Unauthorized
```json
{
  "detail": "Authentication credentials were not provided."
}
```

### 404 Not Found
```json
{
  "detail": "Not found."
}
```

### 400 Validation Error
```json
{
  "time_slot": [
    "Time slot must be in format HHMM-HHMM (e.g., 0700-0800)"
  ],
  "day_of_week": [
    "Invalid day of week"
  ]
}
```

---

## Frontend Integration Examples

### JavaScript/React Example

```javascript
// Create a timetable slot
const createTimetableSlot = async (slotData) => {
  const response = await fetch('/api/timetable-slots/', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`
    },
    body: JSON.stringify(slotData)
  });
  
  if (response.ok) {
    return await response.json();
  }
  throw new Error('Failed to create timetable slot');
};

// Get all timetable slots
const getTimetableSlots = async () => {
  const response = await fetch('/api/timetable-slots/', {
    headers: {
      'Authorization': `Bearer ${token}`
    }
  });
  
  if (response.ok) {
    return await response.json();
  }
  throw new Error('Failed to fetch timetable slots');
};

// Update a timetable slot
const updateTimetableSlot = async (slotId, updateData) => {
  const response = await fetch(`/api/timetable-slots/${slotId}/`, {
    method: 'PATCH',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`
    },
    body: JSON.stringify(updateData)
  });
  
  if (response.ok) {
    return await response.json();
  }
  throw new Error('Failed to update timetable slot');
};

// Delete a timetable slot
const deleteTimetableSlot = async (slotId) => {
  const response = await fetch(`/api/timetable-slots/${slotId}/`, {
    method: 'DELETE',
    headers: {
      'Authorization': `Bearer ${token}`
    }
  });
  
  if (response.ok) {
    return true;
  }
  throw new Error('Failed to delete timetable slot');
};
```

### Python Example

```python
import requests

class TimetableSlotAPI:
    def __init__(self, base_url, token):
        self.base_url = base_url
        self.headers = {
            'Authorization': f'Bearer {token}',
            'Content-Type': 'application/json'
        }
    
    def create_slot(self, slot_data):
        response = requests.post(
            f'{self.base_url}/timetable-slots/',
            json=slot_data,
            headers=self.headers
        )
        response.raise_for_status()
        return response.json()
    
    def get_slots(self):
        response = requests.get(
            f'{self.base_url}/timetable-slots/',
            headers=self.headers
        )
        response.raise_for_status()
        return response.json()
    
    def update_slot(self, slot_id, update_data):
        response = requests.patch(
            f'{self.base_url}/timetable-slots/{slot_id}/',
            json=update_data,
            headers=self.headers
        )
        response.raise_for_status()
        return response.json()
    
    def delete_slot(self, slot_id):
        response = requests.delete(
            f'{self.base_url}/timetable-slots/{slot_id}/',
            headers=self.headers
        )
        response.raise_for_status()
        return True
```

---

## Testing

Use the provided test script to verify all endpoints:

```bash
python test_timetable_crud.py
```

Make sure to update the test script with valid course IDs and user credentials before running.
# Timetable Backend Integration - Complete

## ✅ What's Been Implemented

### 1. **API Service Functions** (`src/lib/api.ts`)
- `getStudentTimetable(studentId: string)` - Get timetable for specific student
- `getCurrentTimetable()` - Get current semester timetable
- `getTimetableBySemester(semester: string, academicYear: string)` - Get timetable for specific semester

### 2. **Updated TypeScript Types** (`src/pages/Timetable.tsx`)
- **ClassInfo**: Updated to match backend structure with `course_code`, `course_name`, `class_type`
- **TimetableSlot**: Updated to use `time_slot` instead of `time`
- **TimetableResponse**: Complete API response type definition
- **TimetableState**: Loading and error state management

### 3. **Backend Data Integration**
- ✅ Replaced sample data with real API calls
- ✅ Added proper error handling and loading states
- ✅ Updated all field references to match backend structure
- ✅ Integrated with existing StudentContext

### 4. **Enhanced User Experience**
- ✅ **Loading State**: Beautiful loading spinner with message
- ✅ **Error State**: User-friendly error display with retry button
- ✅ **Improved Filtering**: Filtered classes are 50% visible (not hidden)
- ✅ **Better Colors**: Increased color intensity for better visibility
- ✅ **Responsive Design**: Maintained all existing responsive features

### 5. **Backend API Documentation**
- ✅ Complete API specification in `TIMETABLE_BACKEND_API.md`
- ✅ Request/response examples
- ✅ Error handling documentation
- ✅ Integration examples

## 🔧 Backend Requirements

The backend should implement the following endpoint:

```
GET /api/students/{student_id}/timetable
```

**Expected Response Format:**
```json
{
  "success": true,
  "data": {
    "student_id": "string",
    "semester": "string", 
    "academic_year": "string",
    "timetable_slots": [
      {
        "time_slot": "0700-0800",
        "monday": {
          "id": "string",
          "course_code": "string",
          "course_name": "string",
          "class_type": "lecture|tutorial|seminar|practical",
          "venue": "string",
          "instructor": "string",
          "duration": 1,
          "description": "string (optional)"
        },
        "tuesday": { /* same structure */ },
        "wednesday": { /* same structure */ },
        "thursday": { /* same structure */ },
        "friday": { /* same structure */ }
      }
    ]
  },
  "message": "Timetable retrieved successfully"
}
```

## 🚀 Ready for Production

The timetable component is now fully prepared for backend integration:

1. **No more sample data** - All data comes from the API
2. **Proper error handling** - Graceful fallbacks for network issues
3. **Loading states** - Professional loading experience
4. **Type safety** - Full TypeScript support
5. **Responsive design** - Works on all devices
6. **Export functionality** - PDF and image export still works
7. **Filtering** - All filtering features maintained

## 🔄 Next Steps

1. **Backend Implementation**: Implement the timetable API endpoint
2. **Testing**: Test with real data from your backend
3. **Error Handling**: Customize error messages for your specific use cases
4. **Performance**: Add caching if needed for large datasets

The component will automatically load the timetable when a student profile is available and display appropriate loading/error states during the process.


